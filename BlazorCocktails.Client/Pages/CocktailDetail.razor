@page "/cocktail/{id}"
@using API.APIService
@inject APIClient Api
@inject ISnackbar Snackbar
@inject NavigationManager Nav


<MudGrid AlignItems="Center" Class="mb-2">
    <MudItem xs="12" md="9">
        <MudText Typo="Typo.h4" Truncate="true" Class="m-0">
            @((detail?.StrDrink) ?? "Detalle")
        </MudText>
    </MudItem>
    <MudItem xs="12" md="3" Class="d-flex justify-end">

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="@(() => Nav.NavigateTo("/alcohol"))">
        Volver
    </MudButton>
    </MudItem>
</MudGrid>

@if (loading)
{
    <MudProgressCircular Indeterminate="true" Class="mt-2" />
}
else if (detail is null)
{
    <MudText Color="Color.Error">No se encontró el cóctel.</MudText>
}
else
{
    <MudStack Spacing="2" Class="mt-2">
        <img src="@detail.StrDrinkThumb" alt="@detail.StrDrink" style="max-width:320px" />
        <MudText Typo="Typo.subtitle1">@detail.StrCategory — @detail.StrGlass</MudText>
        <MudText>@detail.StrInstructions</MudText>
        @if (detail?.Ingredients?.Any() == true)
        {
            <MudList T="string" Dense="true" Class="mt-2">
                @foreach (var ing in detail.Ingredients!)
                {
                    <MudListItem Value="@ing.Name">
                        @ing.Name @(!string.IsNullOrWhiteSpace(ing.Measure) ? $"({ing.Measure})" : "")
                    </MudListItem>
                }
            </MudList>
        }
    </MudStack>
}

@code {
    [Parameter] public string? id { get; set; }

    CocktailDetailDTO? detail;
    bool loading;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(id)) return;

        loading = true;
        try
        {
            detail = await Api.Cocktails_GetByIdAsync(id);
        }
        catch (ApiException ex)
        {
            Snackbar.Add($"Error cargando detalle: {ex.Message}", Severity.Error);
            detail = null;
        }
        finally
        {
            loading = false;
        }
    }
}
