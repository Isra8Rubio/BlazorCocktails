@page "/glasses"
@using API.APIService
@inject APIClient Api
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> L

<PageTitle>@L["Glasses_Title"]</PageTitle>

<MudStack Spacing="2">
    @if (glasses is null)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }
    else
    {
        <MudSelect T="string"
                   Label="@L["Glasses_Label"]"
                   Dense="true"
                   Clearable="true"
                   Placeholder="@L["Glasses_Placeholder"]"
                   Value="selectedGlass"
                   ValueChanged="OnSelectedGlassChanged"
                   Immediate="true"
                   Disabled="@isLoading">
            @foreach (var g in glasses)
            {
                <MudSelectItem Value="@g.StrGlass">
                    @g.StrGlass
                    @* Si quieres traducir los nombres de vaso, cambia a: @L[g.StrGlass] *@
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="mt-2" />
    }
    else if (drinks is null)
    {
        <MudText Class="mt-4" Color="Color.Secondary">
            @L["Glasses_SelectHint"]
        </MudText>
    }
    else
    {
        <MudGrid Class="mt-4">
            @foreach (var d in drinks)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="mb-4 hover-elevate" Style="cursor:pointer"
                             @onclick="@(() => Nav.NavigateTo($"/cocktail/{d.IdDrink}"))">
                        <MudCardMedia Image="@d.StrDrinkThumb" Height="160" Alt="@d.StrDrink" />
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle2">@d.StrDrink</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

@code {
    List<GlassDTO>? glasses;
    List<CocktailItemDTO>? drinks;

    string? selectedGlass;
    bool isLoading;
    long lastRequestId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            glasses = (await Api.Cocktails_GetGlassesAsync())?.ToList();
        }
        catch (ApiException ex)
        {
            Snackbar.Add($"{L["Glasses_Error_LoadGlasses"]}: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnSelectedGlassChanged(string? glass)
    {
        selectedGlass = glass;

        if (string.IsNullOrWhiteSpace(selectedGlass))
        {
            drinks = null;
            StateHasChanged();
            return;
        }

        drinks = null;
        isLoading = true;
        StateHasChanged();

        var requestId = System.Threading.Interlocked.Increment(ref lastRequestId);

        try
        {
            var result = (await Api.Cocktails_GetByGlassAsync(selectedGlass))?.ToList();

            if (requestId != lastRequestId) return;
            drinks = result ?? new();
        }
        catch (ApiException ex)
        {
            if (requestId == lastRequestId)
            {
                Snackbar.Add($"{L["Glasses_Error_LoadDrinks"]}: {ex.Message}", Severity.Error);
                drinks = new();
            }
        }
        finally
        {
            if (requestId == lastRequestId)
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}
