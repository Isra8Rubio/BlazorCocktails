@page "/alcohol"
@using System.Linq
@using API.APIService
@using BlazorCocktails.Client.Shared
@inject APIClient Api
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<App> L

<PageTitle>@L["AlcoholTypes_Title"]</PageTitle>

<HeadContent>
    <link rel="icon" type="image/svg+xml" href="icons/alcohol.svg" />
</HeadContent>

<MudStack Spacing="2">

    @if (alcoholTypes is null)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }
    else
    {
        <MudSelect T="string"
                   Label="@L["AlcoholTypes_Label"]"
                   Dense="true"
                   Clearable="true"
                   Placeholder="@L["AlcoholTypes_Placeholder"]"
                   Value="selectedAlcoholType"
                   ValueChanged="OnSelectedAlcoholTypeChanged"
                   Immediate="true"
                   Disabled="@isLoading">
            @foreach (var t in alcoholTypes)
            {
                <MudSelectItem Value="@t.StrAlcoholic">
                    @DisplayAlcoholType(t.StrAlcoholic)
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Class="mt-2" />
    }
    else if (drinks is null)
    {
        <MudText Class="mt-4" Color="Color.Secondary">
            @L["AlcoholTypes_SelectHint"]
        </MudText>
    }
    else
    {
        @* PAGER ARRIBA *@
        @if (drinks.Count > pageSize)
        {
            <Pager TotalItems="drinks.Count"
                   PageSize="pageSize"
                   Radius="2"
                   @bind-CurrentPage="page" />
        }

        <MudGrid Class="mt-2">
            @foreach (var drink in PagedDrinks)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="mb-4 hover-elevate" Style="cursor:pointer"
                             @onclick="@(() => Nav.NavigateTo($"/cocktail/{drink.IdDrink}"))">
                        <MudCardMedia Image="@drink.StrDrinkThumb" Height="160" Alt="@drink.StrDrink" />
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle2">@drink.StrDrink</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

@code {
    List<AlcoholTypeDTO>? alcoholTypes;
    List<CocktailItemDTO>? drinks;

    string? selectedAlcoholType;
    bool isLoading;
    long lastRequestId = 0;
    int page = 1;
    const int pageSize = 8;

    IEnumerable<CocktailItemDTO> PagedDrinks =>
        (drinks ?? Enumerable.Empty<CocktailItemDTO>())
            .Skip((page - 1) * pageSize)
            .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            alcoholTypes = (await Api.Cocktails_GetAlcoholTypesAsync())?.ToList();
        }
        catch (ApiException ex)
        {
            Snackbar.Add($"{L["AlcoholTypes_Error_LoadTypes"]}: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnSelectedAlcoholTypeChanged(string? newValue)
    {
        selectedAlcoholType = newValue;
        page = 1; // reset al cambiar el filtro

        if (string.IsNullOrWhiteSpace(selectedAlcoholType))
        {
            drinks = null;
            StateHasChanged();
            return;
        }

        drinks = null;
        isLoading = true;
        StateHasChanged();

        var requestId = System.Threading.Interlocked.Increment(ref lastRequestId);

        try
        {
            var result = (await Api.Cocktails_GetByTypeAsync(selectedAlcoholType))?.ToList();
            if (requestId != lastRequestId) return;
            drinks = result ?? new();
        }
        catch (ApiException ex)
        {
            if (requestId == lastRequestId)
            {
                Snackbar.Add($"{L["AlcoholTypes_Error_LoadDrinks"]}: {ex.Message}", Severity.Error);
                drinks = new();
            }
        }
        finally
        {
            if (requestId == lastRequestId)
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    // Muestra traducido, pero conserva el Value original para filtrar
    private string DisplayAlcoholType(string? apiValue)
    {
        var key = (apiValue ?? "").Trim().ToLowerInvariant() switch
        {
            "alcoholic" => "AlcoholType_Alcoholic",
            "non alcoholic" => "AlcoholType_NonAlcoholic",
            "optional alcohol" => "AlcoholType_OptionalAlcohol",
            _ => apiValue ?? ""
        };
        return string.IsNullOrEmpty(key) ? "" : L[key];
    }
}
