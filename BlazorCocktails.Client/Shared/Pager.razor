@using Microsoft.Extensions.Localization
@inject IStringLocalizer<App> L

<div class="d-flex flex-row align-center justify-center gap-1 mt-3 flex-wrap">

    <MudButton Size="Size.Small" Variant="Variant.Outlined"
               Disabled="@(!CanGoPrev)"
               OnClick="@(() => GoTo(CurrentPage - 1))">
        @L["Pager_Previous"]
    </MudButton>

    @foreach (var link in Links)
    {
        if (link.IsEllipsis)
        {
            <MudText class="px-2">…</MudText>
        }
        else
        {
            <MudButton Size="Size.Small"
                       Variant="@(link.Active ? Variant.Filled : Variant.Outlined)"
                       Color="@(link.Active ? Color.Primary : Color.Default)"
                       Disabled="@(!link.Enabled)"
                       OnClick="@(() => GoTo(link.Page))">
                @link.Text
            </MudButton>
        }
    }

    <MudButton Size="Size.Small" Variant="Variant.Outlined"
               Disabled="@(!CanGoNext)"
               OnClick="@(() => GoTo(CurrentPage + 1))">
        @L["Pager_Next"]
    </MudButton>

</div>

@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 12;
    [Parameter] public int Radius { get; set; } = 2;

    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)TotalItems / Math.Max(1, PageSize)));
    private bool CanGoPrev => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;

    private record Link(string Text, int Page, bool Enabled = true, bool Active = false, bool IsEllipsis = false);
    private List<Link> Links = new();

    protected override void OnParametersSet()
    {
        if (CurrentPage < 1) CurrentPage = 1;
        if (CurrentPage > TotalPages) CurrentPage = TotalPages;
        BuildLinks();
    }

    private void BuildLinks()
    {
        Links.Clear();
        var start = Math.Max(1, CurrentPage - Radius);
        var end = Math.Min(TotalPages, CurrentPage + Radius);

        if (start > 1)
        {
            Links.Add(new Link("1", 1));
            if (start > 2) Links.Add(new Link("…", CurrentPage, true, false, true));
        }

        for (int i = start; i <= end; i++)
            Links.Add(new Link(i.ToString(), i, true, i == CurrentPage));

        if (end < TotalPages)
        {
            if (end < TotalPages - 1) Links.Add(new Link("…", CurrentPage, true, false, true));
            Links.Add(new Link(TotalPages.ToString(), TotalPages));
        }
    }

    private async Task GoTo(int page)
    {
        if (page == CurrentPage || page < 1 || page > TotalPages) return;
        CurrentPage = page;
        BuildLinks();
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        await OnChanged.InvokeAsync();
    }
}
