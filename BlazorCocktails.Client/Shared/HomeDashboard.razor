@using BlazorCocktails.Client.Shared.Charts
@using MudBlazor
@inject API.APIService.APIClient Api
@inject ISnackbar Snackbar
@inject Microsoft.Extensions.Localization.IStringLocalizer<App> L
@inject NavigationManager Nav

<MudGrid Class="gap-4">
    <MudItem xs="12" md="5">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">@L["Random_Title"]</MudText>
                <MudSpacer />
                <MudTooltip Text="@L["Random_Refresh"]">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                   Loading="@_refreshing"
                                   Disabled="@_refreshing"
                                   OnClick="RefreshRandom" />
                </MudTooltip>
            </MudCardHeader>

            <MudCardContent>
                @if (_random is null)
                {
                    <MudSkeleton Animation="Animation.Wave" Height="200px" Class="mb-2" />
                    <MudSkeleton Width="60%" />
                    <MudSkeleton Width="30%" />
                }
                else
                {
                    <div @onclick="GoToDetail"
                         style="cursor:pointer"
                         aria-label="Ver detalle del cóctel">

                        <MudCardMedia Image="@_random.ThumbUrl"
                                      Alt="@_random.Name"
                                      Style="width:100%;aspect-ratio:16/9;object-fit:cover;border-radius:12px" />
                        <MudText Typo="Typo.h6" Class="mt-2">@_random.Name</MudText>
                        <MudText Color="Color.Secondary">@_random.DrinkId</MudText>

                        @if (_lastUpdated is not null)
                        {
                            <MudText Typo="Typo.caption" Class="mt-2">
                                @L["Random_LastUpdated"]: @_lastUpdated?.ToLocalTime().ToString("HH:mm:ss")
                            </MudText>
                        }
                    </div>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private API.APIService.RandomCocktailDTO? _random;
    private bool _refreshing;
    private DateTime? _lastUpdated;

    protected override async Task OnInitializedAsync()
    {
        await LoadRandom();
    }

    private async Task LoadRandom()
    {
        try
        {
            _random = await Api.Cocktails_GetRandomRowAsync();
            _lastUpdated = DateTime.UtcNow;
        }
        catch (API.APIService.ApiException ex)
        {
            Snackbar.Add($"Random: {ex.Message}", Severity.Error);
            _random = null;
        }
        StateHasChanged();
    }

    private async Task RefreshRandom()
    {
        if (_refreshing) return;
        _refreshing = true;
        try
        {
            await Api.Cocktails_RefreshRandomNowAsync();
            await LoadRandom();
        }
        catch (API.APIService.ApiException ex)
        {
            Snackbar.Add($"Refresh: {ex.Message}", Severity.Error);
        }
        finally
        {
            _refreshing = false;
        }
    }

    private void GoToDetail()
    {
        if (!string.IsNullOrWhiteSpace(_random?.DrinkId))
            Nav.NavigateTo($"/cocktail/{_random.DrinkId}");
    }
}

@*
 Qué hacemos:
  - Mostramos una tarjeta con un cóctel aleatorio y un botón para refrescarlo. Al hacer clic en la tarjeta, navegamos al detalle.

 UI:
  - Grid con una tarjeta (<MudCard>) que contiene:
     • Header con título y botón de refresco (con tooltip).
     • Contenido: skeletons mientras cargamos; imagen 16:9, nombre e Id cuando hay datos.
     • Marca de tiempo “Última actualización” (hora local) cuando procede.

 Flujo:
  - OnInitializedAsync(): cargamos el cóctel aleatorio (Cocktails_GetRandomRowAsync) y guardamos _lastUpdated (UTC).
  - RefreshRandom(): evitamos repetidos con _refreshing; pedimos al backend que refresque
    (Cocktails_RefreshRandomNowAsync) y recargamos la tarjeta.

 Estado y errores:
  - _random (DTO del cóctel), _refreshing (evita taps dobles), _lastUpdated (timestamp).
  - Ante errores mostramos Snackbar y dejamos _random = null para volver a skeletons.

 Accesibilidad y navegación:
  - El contenedor del cóctel es clicable (cursor:pointer) con aria-label.
  - Si hay DrinkId, navegamos a /cocktail/{id}.

 Localización:
  - Usamos IStringLocalizer<App> (L) para título, tooltip y etiqueta de “Última actualización”.
*@
